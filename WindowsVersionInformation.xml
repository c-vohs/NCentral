<?xml version="1.0" encoding="UTF-8" standalone="no" ?>


<service xmlns="http://www.n-able.com" author="productadmin@n-able.com" creationdate="01/20/2020" organization="N-able Technologies" syntaxversion="1.1.0.0" version="1.0.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


	<servicedefinition id="363797" reason="" releasedependency="4.5.0.0" servicetype="AMP" version="1.0.1.0">
		<description country="ca" language="en"/>
		<displayname country="ca" language="en">Windows Version Information</displayname>
		<displaylabel>Windows Version Information</displaylabel>
		<help country="ca" language="en">Windows Version Information</help>
		<popuphelp country="ca" language="en">Windows Version Information</popuphelp>


		<serviceparameters aggregatedata="false" aggregatetasks="false" maxinstances="100" maxpollrate="60" minpollrate="0" schedulertype="Quartz Based Scheduler" serviceinstancetype="Multiple" timetostale="60" usesstockserviceitem="false"/>


		<moduleparameters>


		
			<moduleparameter key="scan_interval" max="1440" min="0" phardcoded="false" preferredident="0" foruseby="3" type="2" value="0 0/10 * * * ? *">
				<shortdescription country="ca" language="en">Scan Interval</shortdescription>
				<longdescription country="ca" language="en">Scan Interval</longdescription>
				<help country="ca" language="en">The number of minutes between scans.</help>
			</moduleparameter>
			<moduleparameter key="selectedAutomationPolicy" max="1440" min="0" phardcoded="true" preferredident="0" foruseby="3" type="2" value="1040290434">
				<shortdescription country="ca" language="en">Automation Manager Policy</shortdescription>
				<longdescription country="ca" language="en">Automation Manager Policy</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
			<moduleparameter key="serviceIdentifier" max="1440" min="0" phardcoded="false" preferredident="1" foruseby="3" type="2" value="">
				<shortdescription country="ca" language="en">Service Identifier</shortdescription>
				<longdescription country="ca" language="en">Service Identifier</longdescription>
				<help country="ca" language="en"/>
			</moduleparameter>
		</moduleparameters>



		<scandetails>
			<scandetailid>3063100</scandetailid>
			<scandetailid>3063101</scandetailid>
			<scandetailid>3063102</scandetailid>
		</scandetails>
	</servicedefinition>



	<scandetail id="3063100" monitoringtypeon="true" processforstate="true" cookid="5" releasedependency="12.0.0.285" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="String"><threshold high="0" low="0" streval="contain" strvalue="NOTHRESHOLD" state="Normal"/><threshold high="1" low="1" streval="contain" strvalue="NOTHRESHOLD" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">Detected Windows Version</description>
		<displayname country="ca" language="en">SD363797_WindowsVersion</displayname>
	</scandetail>



	<scandetail id="3063101" monitoringtypeon="true" processforstate="true" cookid="5" releasedependency="12.0.0.285" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="String"><threshold high="0" low="0" streval="contain" strvalue="NOTHRESHOLD" state="Normal"/><threshold high="1" low="1" streval="contain" strvalue="NOTHRESHOLD" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">Full Build Number &#40;string&#41;</description>
		<displayname country="ca" language="en">SD363797_FullBuildNumber</displayname>
	</scandetail>



	<scandetail id="3063102" monitoringtypeon="true" processforstate="true" cookid="23" releasedependency="12.0.0.285" version="1.0.0.0" >
		<thresholddefaults>
			<thresholds configurable="true" type="Double"><threshold high="1903" low="1903" streval="" strvalue="" state="Normal"/><threshold high="9223372036854775807" low="1904" streval="" strvalue="" state="Warning"/><threshold high="1902" low="0" streval="" strvalue="" state="Failed"/>
			</thresholds>
		</thresholddefaults>
		<description country="ca" language="en">Friendly Build Number</description>
		<displayname country="ca" language="en">SD363797_obuildnum</displayname>
	</scandetail>


	<automationmanagerpolicy name="Get Windows Full Build-Version" description="This displays both the full build version and the Friendly Windows Product Name and Version for WIndows 10 and older Releases" itemuuid="fd2228d6-4b98-47ca-aa4b-ef2e9c253520" category="0" uploaddate="2020-01-20 09:32:31.438">
		<ampdata></ampdata>
	</automationmanagerpolicy>

</service>
<?N-able-SDK version=3.0?>